buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.moddev.legacyforge' version '2.0.91'
    id 'io.freefair.lombok' version '8.14'
    id 'com.diffplug.spotless' version '7.0.2'
}

sourceSets {
    main.resources {
        srcDir 'src/generated/resources'
    }
}

jar {
    manifest.attributes([
            "MixinConfigs": "scorched_claims.mixins.json"
    ])
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

legacyForge {
    version = project.minecraft_version + '-' + project.forge_version
    parchment {
        mappingsVersion = project.mapping_version
        minecraftVersion = project.minecraft_version
    }

    runs {
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
        client {
            client()
            sourceSet = sourceSets.main
            programArguments.addAll('--refresh-dependencies')
            systemProperty('forge.enabledGameTestNamespaces', project.mod_id)
        }

        server {
            server()
            sourceSet = sourceSets.main
            systemProperty('forge.enabledGameTestNamespaces', project.mod_id)
            programArguments.addAll('--nogui', '--world', 'world-extra')
        }

        data {
            data()
            sourceSet = sourceSets.main
            programArguments.addAll('--mod', project.mod_id, '--all', '--output', file('src/generated/resources/')
                    .getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath())
        }
    }
}

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

repositories {
    maven { // CurseForge
        url "https://www.cursemaven.com"
    }
    maven { // Modrinth
        url "https://api.modrinth.com/maven"
    }
    maven { // EMI
        url "https://maven.terraformersmc.com"
    }
    maven { // AppleSkin
        url "https://maven.ryanliptak.com/"
    }
    mavenLocal()
}

//mods {
//    // define mod <-> source bindings
//    // these are used to tell the game which sources are for which mod
//    // mostly optional in a single mod project
//    // but multi mod projects should define one per mod
//    "${mod_id}" {
//        sourceSet(sourceSets.main)
//    }
//}

apply from: "$rootDir/gradle/scripts/spotless.gradle"

dependencies {
    compileOnly("org.jetbrains:annotations:26.0.1")

    modImplementation("curse.maven:open-parties-and-claims-636608:${opac_version}")
    modImplementation("curse.maven:xaeros-minimap-263420:${xaero_minimap_version}")
    modImplementation("curse.maven:xaeros-world-map-317780:${xaero_world_map_version}")

    modRuntimeOnly("dev.emi:emi-forge:${emi_version}+${minecraft_version}")
    modRuntimeOnly("maven.modrinth:jade:${jade_version}+forge")
    modRuntimeOnly("squeek.appleskin:appleskin-forge:mc${minecraft_version}-${appleskin_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(17)
    options.compilerArgs << "-Aquiet=true" // Suppress mixin notes
}
